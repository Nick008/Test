# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- develop

pool:
  vmImage: ubuntu-latest

steps:
- script: echo Hello, world!
  displayName: 'Run a one-line script'

- script: |
    echo Add other tasks to build, test, and deploy your project.
    echo See https://aka.ms/yaml
  displayName: 'Run a multi-line script'
  
jobs:
  # - template: "template/iOS/cicd-iOS-xcode.yml@manao-devops"
  #   parameters:
  #     useDirectory:
  #     useCertSecureFile:
  #     useCertPwd:
  #     useProvProfileSecureFile:
  #     useSdk:
  #     useConfiguration:
  #     useXCWorkspacePath:
  #     useScheme:
  #     useSigningIdentity:
  #     useProvisioningProfileUuid:
  #     useAppPath:
  #     useToken:
  #     useCurrentApp:

  - job: build
    displayName: "build iOS xcode"
    workspace:
      clean: all

    steps:
      # - script: |
      #     export LANG=en_US.UTF-8
      #     arch -x86_64 yarn install
      #   displayName: "yarn install"

      - script: |
          arch -x86_64 pod update
          arch -x86_64 pod install
        workingDirectory: "$(Build.SourcesDirectory)"
        displayName: "pod install"

      - task: InstallAppleCertificate@2
        inputs:
          certSecureFile: $(dev-apple-p12)
          certPwd: $(dev-apple-password)
        displayName: "install Apple certificate"

      - task: InstallAppleProvisioningProfile@1
        inputs:
          provProfileSecureFile: $(dev-apple-mobileprovision)
        displayName: "install Apple provisioning profile"

      - task: Xcode@5
        inputs:
          actions: "build"
          sdk: $(dev-apple-sdk)
          configuration: $(buildConfiguration)
          xcWorkspacePath: "manao-meals-ios.xcodeproj/project.xcworkspace"
          scheme: $(dev-apple-scheme)
          packageApp: true
          archivePath: output/archive
          exportPath: output/package
          signingOption: manual
          signingIdentity: "$(APPLE_CERTIFICATE_SIGNING_IDENTITY)"
          provisioningProfileUuid: "$(APPLE_PROV_PROFILE_UUID)"
          args: "-destination generic/platform=iOS"
        displayName: "Xcode build"

      - task: CopyFiles@2
        inputs:
          SourceFolder: "$(Build.SourcesDirectory)/output/package"
          Contents: "**/*.ipa"
          TargetFolder: "$(Build.ArtifactStagingDirectory)"
        displayName: "copy files"

      - task: PublishBuildArtifacts@1
        displayName: "publish artifact: drop"

      - pwsh: |
          dir $(Build.ArtifactStagingDirectory)
        displayName: "$(Build.ArtifactStagingDirectory)"

      - pwsh: |
          dir $(Build.ArtifactStagingDirectory)/drop
        displayName: "$(Build.ArtifactStagingDirectory)/drop"

  # - job: deploy
  #   dependsOn: build
  #   displayName: "deploy"
  #   steps:
  #     - task: NodeTool@0
  #       displayName: "Use Node 14.x"
  #       inputs:
  #         versionSpec: 14.x

  #     - pwsh: |
  #         $isFirebaseIns = npm list -g | Select-String -Pattern 'firebase-tools'
  #         if ($isFirebaseIns.Length -eq 0){
  #           npm i -g firebase-tools
  #         }
  #         else{
  #           Write-Host "skip install: firebase-tools already install"
  #         }
  #       displayName: "npm install -g firebase-tools"

  #     - task: DownloadBuildArtifacts@0
  #       displayName: "Download Build Artifacts"
  #       inputs:
  #         artifactName: drop

  #     - pwsh: |
  #         firebase appdistribution:distribute $(System.ArtifactsDirectory)/drop/.ipa --token $(firebase-token) --app $(firebase-apple-dev) --release-notes "$(Build.SourceBranchName)"
  #       displayName: "firebase-cli app distribution"
